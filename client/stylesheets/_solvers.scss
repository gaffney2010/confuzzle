@use "sass:map";
@use "sass:color";

@import '../../node_modules/sassybitwise/dist/SassyBitwise';

$solverIcon: "â– ";
$solverColors: #7ad, #e86, #fab, #e53, #4b9, #bc3, #aa0, #ddd;

$maxSolvers: length($solverColors);

@mixin each-solver {
    @for $i from 1 through $maxSolvers {
        $mask: bw-shift-left(1, $i - 1);
        $dataSelector: "[data-solver-mask=\"#{$mask}\"]";
        $solverColor: nth($solverColors, $i);
        $lightColor: color.adjust($solverColor, $lightness: -20%);
        @content($solverColor, $lightColor, $dataSelector);
    }
}

// bit-packed powerset combinations
@function powerset($n) {
    @if $n == 0 {
        @return [];
    }
    $prev: [0, 1, 3];
    @for $i from 2 through $n {
        $cur: [[0]];
        @for $nbits from 1 through $i - 1 {
            $curj: [];
            @each $s in nth($prev, $nbits + 1) {
                $curj: append($curj, $s);
            }
            @each $s in nth($prev, $nbits) {
                $curj: append($curj, bw-or(bw-shift-left(1, $i - 1), $s));
            }
            $cur: append($cur, $curj);
        }
        $prev: append($cur, bw-shift-left(1, $i) - 1);
    }
    @return $prev;   
}

// n choose k
@function combinations($list, $k: length($list)) {
    $n: length($list);
    @if $n == 0 {
        @return ();
    }
    $result: ();
    $combos: nth(powerset($n), $k + 1);
    @for $i from 1 through length($combos) {
        $values: [];
        $mask: nth($combos, $i);
        @for $j from 1 through $n {
            @if bw-and($mask, bw-shift-left(1, $j - 1)) > 0 {
                $values: append($values, nth($list, $j));
            }
        }
        $result: map.merge($result, ($mask : $values));
    }
    @return $result;
}

@function gradient($values, $n) {
    $g: ();
    $stripeWidth: 10px;
    @for $i from 1 through length($values) {
        $c: nth($values, $i);
        $g: append($g, $c #{($i - 1) * $stripeWidth}, $separator: comma);
        $g: append($g, $c #{$i * $stripeWidth}, $separator: comma);
    }
    @return $g;
}

// number of solvers to highlight simultaneously
@for $nMask from 1 through 4 {
    $combos: combinations($solverColors, $nMask);
    @each $mask, $values in $combos {
        td#{"[data-solver-mask=\"#{$mask}\"]"} {
            background: repeating-linear-gradient(
              45deg,
              gradient($values, $nMask),
            ) !important;
        }
    }
}
